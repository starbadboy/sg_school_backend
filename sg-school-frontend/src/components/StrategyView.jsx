import React, { useState, useEffect } from 'react'
import { ArrowLeft, Download, Brain, Loader2, CheckCircle, AlertCircle, Clock, Target, Users, Home } from 'lucide-react'
import axios from 'axios'

const StrategyView = ({ selectedSchools, userLocation, onBack }) => {
  const [strategy, setStrategy] = useState('')
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [userInputs, setUserInputs] = useState({
    has_siblings: false,
    is_alumni: false,
    willing_to_volunteer: false,
    can_relocate: false,
    priorities: [],
    application_year: '2025'
  })
  const [showInputForm, setShowInputForm] = useState(true)

  const priorityOptions = [
    'Academic excellence',
    'Proximity to home',
    'School culture and values',
    'Co-curricular activities',
    'Class size',
    'School facilities'
  ]

  const handleInputChange = (field, value) => {
    setUserInputs(prev => ({
      ...prev,
      [field]: value
    }))
  }

  const handlePriorityToggle = (priority) => {
    setUserInputs(prev => ({
      ...prev,
      priorities: prev.priorities.includes(priority)
        ? prev.priorities.filter(p => p !== priority)
        : [...prev.priorities, priority]
    }))
  }

  const generateStrategy = async () => {
    if (selectedSchools.length === 0) {
      setError('Please select at least one school to generate a strategy')
      return
    }

    setLoading(true)
    setError('')
    setShowInputForm(false)

    try {
      const requestData = {
        address: userLocation?.address,
        target_schools: selectedSchools.map(s => s.name),
        schools_data: selectedSchools,
        ...userInputs
      }

      const response = await axios.post('/api/strategy/generate', requestData)
      
      if (response.data.strategy) {
        setStrategy(response.data.strategy)
      } else {
        throw new Error('No strategy received')
      }
    } catch (err) {
      console.error('Strategy generation error:', err)
      setError('Unable to generate strategy. Please try again later.')
    } finally {
      setLoading(false)
    }
  }

  const downloadStrategy = () => {
    const content = `
SG School Finder - P1 Admission Strategy
Generated on: ${new Date().toLocaleDateString()}

Selected Schools:
${selectedSchools.map(s => `- ${s.name} (${s.distance}km away)`).join('\n')}

Your Information:
- Address: ${userLocation?.address}
- Has siblings in target schools: ${userInputs.has_siblings ? 'Yes' : 'No'}
- Alumni of target schools: ${userInputs.is_alumni ? 'Yes' : 'No'}
- Willing to volunteer: ${userInputs.willing_to_volunteer ? 'Yes' : 'No'}
- Can relocate: ${userInputs.can_relocate ? 'Yes' : 'No'}
- Priorities: ${userInputs.priorities.join(', ')}

AI-Generated Strategy:
${strategy}

---
Generated by SG School Finder
    `.trim()

    const blob = new Blob([content], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `p1-strategy-${new Date().toISOString().split('T')[0]}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <button onClick={onBack} className="p-2 hover:bg-gray-100 rounded-lg">
            <ArrowLeft className="h-5 w-5 text-gray-600" />
          </button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">AI-Powered P1 Strategy</h1>
            <p className="text-gray-600">Personalized admission recommendations using DeepSeek AI</p>
          </div>
        </div>
        
        {strategy && (
          <button onClick={downloadStrategy} className="btn-outline flex items-center space-x-2">
            <Download className="h-4 w-4" />
            <span>Download Strategy</span>
          </button>
        )}
      </div>

      {/* Selected Schools Summary */}
      <div className="card">
        <h3 className="font-semibold text-gray-900 mb-4">Selected Schools ({selectedSchools.length})</h3>
        <div className="grid gap-3">
          {selectedSchools.map((school, index) => (
            <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
              <div>
                <div className="font-medium text-gray-900">{school.name}</div>
                <div className="text-sm text-gray-600">{school.distance}km away</div>
              </div>
              <div className="text-right">
                <div className="text-sm font-medium text-gray-900">
                  {school.p1_data?.balloted ? 'Balloted' : 'Non-balloted'}
                </div>
                <div className="text-xs text-gray-600">
                  {school.p1_data?.total_vacancy} places
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* User Input Form */}
      {showInputForm && (
        <div className="card">
          <h3 className="font-semibold text-gray-900 mb-6">Tell Us About Your Situation</h3>
          
          <div className="space-y-6">
            {/* Family Situation */}
            <div className="space-y-4">
              <h4 className="font-medium text-gray-900 flex items-center space-x-2">
                <Users className="h-5 w-5" />
                <span>Family Situation</span>
              </h4>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <label className="flex items-center space-x-3 p-3 border rounded-lg cursor-pointer hover:bg-gray-50">
                  <input
                    type="checkbox"
                    checked={userInputs.has_siblings}
                    onChange={(e) => handleInputChange('has_siblings', e.target.checked)}
                    className="rounded border-gray-300"
                  />
                  <div>
                    <div className="font-medium text-gray-900">Has siblings in target schools</div>
                    <div className="text-sm text-gray-600">Eligible for Phase 1 registration</div>
                  </div>
                </label>

                <label className="flex items-center space-x-3 p-3 border rounded-lg cursor-pointer hover:bg-gray-50">
                  <input
                    type="checkbox"
                    checked={userInputs.is_alumni}
                    onChange={(e) => handleInputChange('is_alumni', e.target.checked)}
                    className="rounded border-gray-300"
                  />
                  <div>
                    <div className="font-medium text-gray-900">Parent is alumni</div>
                    <div className="text-sm text-gray-600">Eligible for Phase 2A registration</div>
                  </div>
                </label>

                <label className="flex items-center space-x-3 p-3 border rounded-lg cursor-pointer hover:bg-gray-50">
                  <input
                    type="checkbox"
                    checked={userInputs.willing_to_volunteer}
                    onChange={(e) => handleInputChange('willing_to_volunteer', e.target.checked)}
                    className="rounded border-gray-300"
                  />
                  <div>
                    <div className="font-medium text-gray-900">Willing to volunteer</div>
                    <div className="text-sm text-gray-600">Can qualify for Phase 2B registration</div>
                  </div>
                </label>

                <label className="flex items-center space-x-3 p-3 border rounded-lg cursor-pointer hover:bg-gray-50">
                  <input
                    type="checkbox"
                    checked={userInputs.can_relocate}
                    onChange={(e) => handleInputChange('can_relocate', e.target.checked)}
                    className="rounded border-gray-300"
                  />
                  <div>
                    <div className="font-medium text-gray-900">Can relocate if needed</div>
                    <div className="text-sm text-gray-600">Flexible with location for better chances</div>
                  </div>
                </label>
              </div>
            </div>

            {/* Priorities */}
            <div className="space-y-4">
              <h4 className="font-medium text-gray-900 flex items-center space-x-2">
                <Target className="h-5 w-5" />
                <span>Your Priorities</span>
              </h4>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                {priorityOptions.map((priority, index) => (
                  <label
                    key={index}
                    className={`flex items-center space-x-3 p-3 border rounded-lg cursor-pointer transition-colors ${
                      userInputs.priorities.includes(priority)
                        ? 'border-primary-500 bg-primary-50'
                        : 'border-gray-300 hover:bg-gray-50'
                    }`}
                  >
                    <input
                      type="checkbox"
                      checked={userInputs.priorities.includes(priority)}
                      onChange={() => handlePriorityToggle(priority)}
                      className="rounded border-gray-300"
                    />
                    <span className="font-medium text-gray-900">{priority}</span>
                  </label>
                ))}
              </div>
            </div>

            {/* Application Year */}
            <div className="space-y-4">
              <h4 className="font-medium text-gray-900 flex items-center space-x-2">
                <Clock className="h-5 w-5" />
                <span>Application Timeline</span>
              </h4>
              
              <select
                value={userInputs.application_year}
                onChange={(e) => handleInputChange('application_year', e.target.value)}
                className="input-field max-w-xs"
              >
                <option value="2025">2025 (Next Year)</option>
                <option value="2026">2026</option>
                <option value="2027">2027</option>
              </select>
            </div>

            {/* Generate Button */}
            <div className="pt-4 border-t border-gray-200">
              <button
                onClick={generateStrategy}
                disabled={loading || selectedSchools.length === 0}
                className="btn-primary w-full py-3 text-lg font-semibold"
              >
                <div className="flex items-center justify-center space-x-2">
                  <Brain className="h-5 w-5" />
                  <span>Generate AI Strategy</span>
                </div>
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Loading State */}
      {loading && (
        <div className="card text-center py-12">
          <Loader2 className="h-12 w-12 animate-spin text-primary-600 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-900 mb-2">Generating Your Strategy...</h3>
          <p className="text-gray-600">
            Our AI is analyzing your situation and school data to create personalized recommendations.
          </p>
        </div>
      )}

      {/* Error State */}
      {error && (
        <div className="card">
          <div className="flex items-center space-x-3 text-red-600">
            <AlertCircle className="h-6 w-6" />
            <div>
              <h3 className="font-medium">Error Generating Strategy</h3>
              <p className="text-sm mt-1">{error}</p>
            </div>
          </div>
          <button
            onClick={() => {
              setError('')
              setShowInputForm(true)
            }}
            className="btn-outline mt-4"
          >
            Try Again
          </button>
        </div>
      )}

      {/* Strategy Results */}
      {strategy && !loading && (
        <div className="card">
          <div className="flex items-center space-x-3 mb-6">
            <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
              <CheckCircle className="h-6 w-6 text-green-600" />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-gray-900">Your Personalized P1 Strategy</h3>
              <p className="text-sm text-gray-600">Generated by DeepSeek AI • {new Date().toLocaleDateString()}</p>
            </div>
          </div>

          <div className="prose max-w-none">
            <div className="whitespace-pre-wrap text-gray-900 leading-relaxed">
              {strategy}
            </div>
          </div>

          <div className="mt-6 pt-6 border-t border-gray-200 flex items-center justify-between">
            <div className="text-sm text-gray-600">
              Strategy generated based on {selectedSchools.length} selected schools and your preferences
            </div>
            <div className="flex items-center space-x-3">
              <button
                onClick={() => {
                  setStrategy('')
                  setShowInputForm(true)
                }}
                className="btn-secondary"
              >
                Generate New Strategy
              </button>
              <button onClick={downloadStrategy} className="btn-primary">
                Download Strategy
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default StrategyView 