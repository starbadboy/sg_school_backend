import React, { useState, useEffect } from 'react'
import { ArrowLeft, Download, Brain, Loader2, CheckCircle, AlertCircle, Clock, Target, Users, Home, Sparkles, FileText, Calendar, Award } from 'lucide-react'
import axios from 'axios'

const StrategyView = ({ selectedSchools, userLocation, onBack }) => {
  const [strategy, setStrategy] = useState('')
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [userInputs, setUserInputs] = useState({
    has_siblings: false,
    is_alumni: false,
    willing_to_volunteer: false,
    can_relocate: false,
    priorities: [],
    application_year: '2025'
  })
  const [showInputForm, setShowInputForm] = useState(true)

  const priorityOptions = [
    { id: 'academic', label: 'Academic Excellence', icon: Award, color: 'text-blue-600 bg-blue-50 border-blue-200' },
    { id: 'proximity', label: 'Proximity to Home', icon: Home, color: 'text-emerald-600 bg-emerald-50 border-emerald-200' },
    { id: 'culture', label: 'School Culture & Values', icon: Users, color: 'text-purple-600 bg-purple-50 border-purple-200' },
    { id: 'activities', label: 'Co-curricular Activities', icon: Target, color: 'text-amber-600 bg-amber-50 border-amber-200' },
    { id: 'class_size', label: 'Small Class Size', icon: Users, color: 'text-pink-600 bg-pink-50 border-pink-200' },
    { id: 'facilities', label: 'Modern Facilities', icon: Award, color: 'text-indigo-600 bg-indigo-50 border-indigo-200' }
  ]

  const handleInputChange = (field, value) => {
    setUserInputs(prev => ({
      ...prev,
      [field]: value
    }))
  }

  const handlePriorityToggle = (priorityId) => {
    const priority = priorityOptions.find(p => p.id === priorityId)?.label
    setUserInputs(prev => ({
      ...prev,
      priorities: prev.priorities.includes(priority)
        ? prev.priorities.filter(p => p !== priority)
        : [...prev.priorities, priority]
    }))
  }

  const generateStrategy = async () => {
    if (selectedSchools.length === 0) {
      setError('Please select at least one school to generate a strategy')
      return
    }

    setLoading(true)
    setError('')
    setShowInputForm(false)

    try {
      const requestData = {
        address: userLocation?.address,
        target_schools: selectedSchools.map(s => s.name),
        schools_data: selectedSchools,
        ...userInputs
      }

      const response = await axios.post('/api/strategy/generate', requestData)
      
      if (response.data.strategy) {
        setStrategy(response.data.strategy)
      } else {
        throw new Error('No strategy received')
      }
    } catch (err) {
      console.error('Strategy generation error:', err)
      setError('Unable to generate strategy. Please try again later.')
    } finally {
      setLoading(false)
    }
  }

  const downloadStrategy = () => {
    const content = `
SG School Finder - P1 Admission Strategy
Generated on: ${new Date().toLocaleDateString()}

Selected Schools:
${selectedSchools.map(s => `- ${s.name} (${s.distance}km away)`).join('\n')}

Your Information:
- Address: ${userLocation?.address}
- Has siblings in target schools: ${userInputs.has_siblings ? 'Yes' : 'No'}
- Alumni of target schools: ${userInputs.is_alumni ? 'Yes' : 'No'}
- Willing to volunteer: ${userInputs.willing_to_volunteer ? 'Yes' : 'No'}
- Can relocate: ${userInputs.can_relocate ? 'Yes' : 'No'}
- Priorities: ${userInputs.priorities.join(', ')}

AI-Generated Strategy:
${strategy}

---
Generated by SG School Finder
    `.trim()

    const blob = new Blob([content], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `p1-strategy-${new Date().toISOString().split('T')[0]}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  return (
    <div className="space-y-8 animate-fade-in">
      {/* Enhanced Header */}
      <div className="card-gradient border-2 border-purple-200">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-6">
            <button onClick={onBack} className="btn-ghost p-3 rounded-xl">
              <ArrowLeft className="h-5 w-5" />
            </button>
            <div className="flex items-center space-x-4">
              <div className="w-16 h-16 bg-gradient-to-r from-purple-600 to-pink-600 rounded-2xl flex items-center justify-center">
                <Brain className="h-8 w-8 text-white" />
              </div>
              <div>
                <h1 className="text-3xl font-bold text-slate-900">AI-Powered P1 Strategy</h1>
                <p className="text-lg text-slate-600">Personalized admission recommendations using advanced AI</p>
              </div>
            </div>
          </div>
          
          {strategy && (
            <button onClick={downloadStrategy} className="btn-outline flex items-center space-x-2">
              <Download className="h-4 w-4" />
              <span>Download Strategy</span>
            </button>
          )}
        </div>
      </div>

      {/* Selected Schools Summary */}
      <div className="card-elevated">
        <div className="flex items-center space-x-4 mb-6">
          <div className="w-12 h-12 bg-blue-100 rounded-2xl flex items-center justify-center">
            <CheckCircle className="h-6 w-6 text-blue-600" />
          </div>
          <h3 className="text-xl font-bold text-slate-900">Selected Schools ({selectedSchools.length})</h3>
        </div>
        
        <div className="grid gap-4">
          {selectedSchools.map((school, index) => (
            <div key={index} className="flex items-center justify-between p-4 bg-slate-50 rounded-2xl border border-slate-200 hover:border-blue-300 transition-colors">
              <div className="flex items-center space-x-4">
                <div className="w-10 h-10 bg-gradient-to-r from-blue-600 to-blue-700 rounded-xl flex items-center justify-center">
                  <span className="text-white font-bold text-sm">#{index + 1}</span>
                </div>
                <div>
                  <div className="font-semibold text-slate-900">{school.name}</div>
                  <div className="text-sm text-slate-600">{school.distance}km away</div>
                </div>
              </div>
              <div className="text-right space-y-1">
                <div className={`text-sm font-semibold ${school.p1_data?.balloted ? 'text-red-600' : 'text-emerald-600'}`}>
                  {school.p1_data?.balloted ? 'Balloted' : 'Non-balloted'}
                </div>
                <div className="text-xs text-slate-500">
                  {school.p1_data?.total_vacancy} places available
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Enhanced User Input Form */}
      {showInputForm && (
        <div className="card-elevated">
          <div className="text-center mb-8">
            <div className="w-16 h-16 bg-gradient-to-r from-emerald-600 to-blue-600 rounded-2xl flex items-center justify-center mx-auto mb-4">
              <Users className="h-8 w-8 text-white" />
            </div>
            <h3 className="text-2xl font-bold text-slate-900 mb-2">Tell Us About Your Situation</h3>
            <p className="text-lg text-slate-600">Help us create the most accurate strategy for your family</p>
          </div>
          
          <div className="space-y-10">
            {/* Family Situation */}
            <div className="space-y-6">
              <div className="flex items-center space-x-3">
                <div className="w-8 h-8 bg-emerald-100 rounded-xl flex items-center justify-center">
                  <Users className="h-5 w-5 text-emerald-600" />
                </div>
                <h4 className="text-xl font-bold text-slate-900">Family Situation</h4>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <label className={`card-hover p-6 cursor-pointer transition-all duration-300 ${
                  userInputs.has_siblings 
                    ? 'border-2 border-emerald-500 bg-emerald-50' 
                    : 'border border-slate-200'
                }`}>
                  <input
                    type="checkbox"
                    checked={userInputs.has_siblings}
                    onChange={(e) => handleInputChange('has_siblings', e.target.checked)}
                    className="sr-only"
                  />
                  <div className="flex items-start space-x-4">
                    <div className={`w-12 h-12 rounded-2xl flex items-center justify-center ${
                      userInputs.has_siblings ? 'bg-emerald-600 text-white' : 'bg-slate-100 text-slate-500'
                    }`}>
                      <CheckCircle className="h-6 w-6" />
                    </div>
                    <div className="flex-1">
                      <div className="font-bold text-slate-900 mb-2">Has siblings in target schools</div>
                      <div className="text-sm text-slate-600 leading-relaxed">Eligible for Phase 1 registration with guaranteed placement</div>
                    </div>
                  </div>
                </label>

                <label className={`card-hover p-6 cursor-pointer transition-all duration-300 ${
                  userInputs.is_alumni 
                    ? 'border-2 border-blue-500 bg-blue-50' 
                    : 'border border-slate-200'
                }`}>
                  <input
                    type="checkbox"
                    checked={userInputs.is_alumni}
                    onChange={(e) => handleInputChange('is_alumni', e.target.checked)}
                    className="sr-only"
                  />
                  <div className="flex items-start space-x-4">
                    <div className={`w-12 h-12 rounded-2xl flex items-center justify-center ${
                      userInputs.is_alumni ? 'bg-blue-600 text-white' : 'bg-slate-100 text-slate-500'
                    }`}>
                      <Award className="h-6 w-6" />
                    </div>
                    <div className="flex-1">
                      <div className="font-bold text-slate-900 mb-2">Parent is alumni</div>
                      <div className="text-sm text-slate-600 leading-relaxed">Eligible for Phase 2A registration with higher priority</div>
                    </div>
                  </div>
                </label>

                <label className={`card-hover p-6 cursor-pointer transition-all duration-300 ${
                  userInputs.willing_to_volunteer 
                    ? 'border-2 border-purple-500 bg-purple-50' 
                    : 'border border-slate-200'
                }`}>
                  <input
                    type="checkbox"
                    checked={userInputs.willing_to_volunteer}
                    onChange={(e) => handleInputChange('willing_to_volunteer', e.target.checked)}
                    className="sr-only"
                  />
                  <div className="flex items-start space-x-4">
                    <div className={`w-12 h-12 rounded-2xl flex items-center justify-center ${
                      userInputs.willing_to_volunteer ? 'bg-purple-600 text-white' : 'bg-slate-100 text-slate-500'
                    }`}>
                      <Users className="h-6 w-6" />
                    </div>
                    <div className="flex-1">
                      <div className="font-bold text-slate-900 mb-2">Willing to volunteer</div>
                      <div className="text-sm text-slate-600 leading-relaxed">Can qualify for Phase 2B registration through community service</div>
                    </div>
                  </div>
                </label>

                <label className={`card-hover p-6 cursor-pointer transition-all duration-300 ${
                  userInputs.can_relocate 
                    ? 'border-2 border-amber-500 bg-amber-50' 
                    : 'border border-slate-200'
                }`}>
                  <input
                    type="checkbox"
                    checked={userInputs.can_relocate}
                    onChange={(e) => handleInputChange('can_relocate', e.target.checked)}
                    className="sr-only"
                  />
                  <div className="flex items-start space-x-4">
                    <div className={`w-12 h-12 rounded-2xl flex items-center justify-center ${
                      userInputs.can_relocate ? 'bg-amber-600 text-white' : 'bg-slate-100 text-slate-500'
                    }`}>
                      <Home className="h-6 w-6" />
                    </div>
                    <div className="flex-1">
                      <div className="font-bold text-slate-900 mb-2">Can relocate if needed</div>
                      <div className="text-sm text-slate-600 leading-relaxed">Flexible with location for better admission chances</div>
                    </div>
                  </div>
                </label>
              </div>
            </div>

            {/* Priorities */}
            <div className="space-y-6">
              <div className="flex items-center space-x-3">
                <div className="w-8 h-8 bg-purple-100 rounded-xl flex items-center justify-center">
                  <Target className="h-5 w-5 text-purple-600" />
                </div>
                <h4 className="text-xl font-bold text-slate-900">Your Priorities</h4>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {priorityOptions.map((priority) => {
                  const isSelected = userInputs.priorities.includes(priority.label)
                  return (
                    <label
                      key={priority.id}
                      className={`card-hover p-4 cursor-pointer transition-all duration-300 ${
                        isSelected
                          ? `border-2 ${priority.color.split(' ')[2]} ${priority.color.split(' ')[1]}`
                          : 'border border-slate-200'
                      }`}
                    >
                      <input
                        type="checkbox"
                        checked={isSelected}
                        onChange={() => handlePriorityToggle(priority.id)}
                        className="sr-only"
                      />
                      <div className="flex items-center space-x-3">
                        <div className={`w-10 h-10 rounded-xl flex items-center justify-center ${
                          isSelected ? priority.color.split(' ')[0] + ' ' + priority.color.split(' ')[1].replace('bg-', 'text-') : 'bg-slate-100 text-slate-500'
                        }`}>
                          <priority.icon className="h-5 w-5" />
                        </div>
                        <span className="font-semibold text-slate-900">{priority.label}</span>
                      </div>
                    </label>
                  )
                })}
              </div>
            </div>

            {/* Application Year */}
            <div className="space-y-6">
              <div className="flex items-center space-x-3">
                <div className="w-8 h-8 bg-blue-100 rounded-xl flex items-center justify-center">
                  <Calendar className="h-5 w-5 text-blue-600" />
                </div>
                <h4 className="text-xl font-bold text-slate-900">Application Timeline</h4>
              </div>
              
              <div className="max-w-xs">
                <select
                  value={userInputs.application_year}
                  onChange={(e) => handleInputChange('application_year', e.target.value)}
                  className="input-field-lg"
                >
                  <option value="2025">2025 (Next Year)</option>
                  <option value="2026">2026</option>
                  <option value="2027">2027</option>
                </select>
              </div>
            </div>

            {/* Generate Button */}
            <div className="pt-8 border-t border-slate-200">
              <button
                onClick={generateStrategy}
                disabled={loading || selectedSchools.length === 0}
                className="w-full btn-primary py-4 text-xl font-bold shadow-xl"
              >
                <div className="flex items-center justify-center space-x-3">
                  <Brain className="h-6 w-6" />
                  <span>Generate AI Strategy</span>
                  <Sparkles className="h-5 w-5" />
                </div>
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Enhanced Loading State */}
      {loading && (
        <div className="card-elevated text-center py-16">
          <div className="w-20 h-20 bg-gradient-to-r from-purple-600 to-pink-600 rounded-3xl flex items-center justify-center mx-auto mb-6">
            <Loader2 className="h-10 w-10 animate-spin text-white" />
          </div>
          <h3 className="text-2xl font-bold text-slate-900 mb-4">Generating Your Strategy...</h3>
          <p className="text-lg text-slate-600 mb-8">
            Our AI is analyzing your situation and school data to create personalized recommendations.
          </p>
          <div className="flex items-center justify-center space-x-6 text-sm text-slate-500">
            <div className="flex items-center space-x-2">
              <div className="w-2 h-2 bg-purple-500 rounded-full animate-pulse"></div>
              <span>Analyzing data</span>
            </div>
            <div className="flex items-center space-x-2">
              <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse" style={{ animationDelay: '0.5s' }}></div>
              <span>Processing preferences</span>
            </div>
            <div className="flex items-center space-x-2">
              <div className="w-2 h-2 bg-emerald-500 rounded-full animate-pulse" style={{ animationDelay: '1s' }}></div>
              <span>Creating strategy</span>
            </div>
          </div>
        </div>
      )}

      {/* Enhanced Error State */}
      {error && (
        <div className="card bg-red-50 border-2 border-red-200">
          <div className="flex items-start space-x-4">
            <div className="w-12 h-12 bg-red-100 rounded-2xl flex items-center justify-center">
              <AlertCircle className="h-6 w-6 text-red-600" />
            </div>
            <div className="flex-1">
              <h3 className="font-bold text-red-900 mb-2">Strategy Generation Failed</h3>
              <p className="text-red-700 mb-4">{error}</p>
              <div className="flex items-center space-x-3">
                <button
                  onClick={() => {
                    setError('')
                    setShowInputForm(true)
                  }}
                  className="btn-secondary"
                >
                  Try Again
                </button>
                <button onClick={onBack} className="btn-ghost">
                  Back to Results
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Enhanced Strategy Results */}
      {strategy && !loading && (
        <div className="card-elevated">
          <div className="flex items-start space-x-4 mb-8">
            <div className="w-16 h-16 bg-gradient-to-r from-emerald-600 to-blue-600 rounded-2xl flex items-center justify-center">
              <FileText className="h-8 w-8 text-white" />
            </div>
            <div>
              <h3 className="text-2xl font-bold text-slate-900">Your Personalized P1 Strategy</h3>
              <p className="text-lg text-slate-600">Generated by AI • {new Date().toLocaleDateString()}</p>
            </div>
          </div>

          <div className="prose prose-lg max-w-none">
            <div className="bg-slate-50 rounded-2xl p-6 border border-slate-200">
              <div className="whitespace-pre-wrap text-slate-900 leading-relaxed">
                {strategy}
              </div>
            </div>
          </div>

          <div className="mt-8 pt-8 border-t border-slate-200 flex flex-col sm:flex-row items-center justify-between space-y-4 sm:space-y-0">
            <div className="text-slate-600">
              Strategy based on {selectedSchools.length} selected schools and your preferences
            </div>
            <div className="flex items-center space-x-4">
              <button
                onClick={() => {
                  setStrategy('')
                  setShowInputForm(true)
                }}
                className="btn-secondary"
              >
                Generate New Strategy
              </button>
              <button onClick={downloadStrategy} className="btn-primary">
                <Download className="h-4 w-4 mr-2" />
                Download Strategy
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default StrategyView 