import React, { useState, useEffect } from 'react'
import { ArrowLeft, Download, Brain, Loader2, CheckCircle, AlertCircle, Clock, Target, Users, Home, Sparkles, FileText, Calendar, Award, TrendingUp, BarChart3, PieChart, Shield, MapPin, AlertTriangle, Star, Zap, ChevronRight, Info } from 'lucide-react'
import axios from 'axios'
import ReactMarkdown from 'react-markdown'
import remarkGfm from 'remark-gfm'
import { PieChart as RechartsPieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, RadialBarChart, RadialBar } from 'recharts'

const StrategyView = ({ selectedSchools, userLocation, onBack }) => {
  const [strategy, setStrategy] = useState('')
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [activeTab, setActiveTab] = useState('overview')
  const [userInputs, setUserInputs] = useState({
    has_siblings: false,
    is_alumni: false,
    willing_to_volunteer: false,
    can_relocate: false,
    priorities: [],
    application_year: '2025'
  })
  const [showInputForm, setShowInputForm] = useState(true)

  const priorityOptions = [
    { id: 'academic', label: 'Academic Excellence', icon: Award, color: 'text-blue-600 bg-blue-50 border-blue-200' },
    { id: 'proximity', label: 'Proximity to Home', icon: Home, color: 'text-emerald-600 bg-emerald-50 border-emerald-200' },
    { id: 'culture', label: 'School Culture & Values', icon: Users, color: 'text-purple-600 bg-purple-50 border-purple-200' },
    { id: 'activities', label: 'Co-curricular Activities', icon: Target, color: 'text-amber-600 bg-amber-50 border-amber-200' },
    { id: 'class_size', label: 'Small Class Size', icon: Users, color: 'text-pink-600 bg-pink-50 border-pink-200' },
    { id: 'facilities', label: 'Modern Facilities', icon: Award, color: 'text-indigo-600 bg-indigo-50 border-indigo-200' }
  ]

  const handleInputChange = (field, value) => {
    setUserInputs(prev => ({
      ...prev,
      [field]: value
    }))
  }

  const handlePriorityToggle = (priorityId) => {
    const priority = priorityOptions.find(p => p.id === priorityId)?.label
    setUserInputs(prev => ({
      ...prev,
      priorities: prev.priorities.includes(priority)
        ? prev.priorities.filter(p => p !== priority)
        : [...prev.priorities, priority]
    }))
  }

  const generateStrategy = async () => {
    if (selectedSchools.length === 0) {
      setError('Please select at least one school to generate a strategy')
      return
    }

    setLoading(true)
    setError('')
    setShowInputForm(false)

    try {
      const requestData = {
        address: userLocation?.address,
        target_schools: selectedSchools.map(s => s.name),
        schools_data: selectedSchools,
        ...userInputs
      }

      const response = await axios.post('/api/strategy/generate', requestData)
      
      if (response.data.strategy) {
        setStrategy(response.data.strategy)
      } else {
        throw new Error('No strategy received')
      }
    } catch (err) {
      console.error('Strategy generation error:', err)
      setError('Unable to generate strategy. Please try again later.')
    } finally {
      setLoading(false)
    }
  }

  const downloadStrategy = () => {
    const content = `
SG School Finder - P1 Admission Strategy
Generated on: ${new Date().toLocaleDateString()}

Selected Schools:
${selectedSchools.map(s => `- ${s.name} (${s.distance}km away)`).join('\n')}

Your Information:
- Address: ${userLocation?.address}
- Has siblings in target schools: ${userInputs.has_siblings ? 'Yes' : 'No'}
- Alumni of target schools: ${userInputs.is_alumni ? 'Yes' : 'No'}
- Willing to volunteer: ${userInputs.willing_to_volunteer ? 'Yes' : 'No'}
- Can relocate: ${userInputs.can_relocate ? 'Yes' : 'No'}
- Priorities: ${userInputs.priorities.join(', ')}

AI-Generated Strategy:
${strategy}

---
Generated by SG School Finder
    `.trim()

    const blob = new Blob([content], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `p1-strategy-${new Date().toISOString().split('T')[0]}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  // Enhanced data visualization functions
  const getCompetitivenessData = () => {
    return selectedSchools.map(school => ({
      name: school.name.split(' ').slice(0, 2).join(' '), // Shorter names for charts
      score: school.p1_data?.overall_competitiveness_score || 0,
      tier: school.p1_data?.competitiveness_tier || 'Unknown',
      balloted: school.p1_data?.balloted || false,
      distance: school.distance,
      successRate: getSchoolSuccessRate(school)
    }))
  }

  const getSchoolSuccessRate = (school) => {
    const p1Data = school.p1_data
    if (!p1Data?.phases) return 0
    
    const phases = ['phase_1', 'phase_2a', 'phase_2b', 'phase_2c', 'phase_2c_supp']
    let totalApplied = 0
    let totalTaken = 0
    
    phases.forEach(phaseKey => {
      const phase = p1Data.phases[phaseKey]
      if (phase) {
        totalApplied += phase.applicants || phase.applied || 0
        totalTaken += phase.taken || 0
      }
    })
    
    return totalApplied > 0 ? Math.round((totalTaken / totalApplied) * 100) : 0
  }

  const getRiskAssessmentData = () => {
    return selectedSchools.map(school => {
      const balloted = school.p1_data?.balloted || false
      const distance = school.distance
      const successRate = getSchoolSuccessRate(school)
      
      let riskLevel = 'Low'
      let riskScore = 0
      
      if (balloted) {
        riskLevel = distance <= 1 ? 'Medium' : 'High'
        riskScore = distance <= 1 ? 60 : 85
      } else {
        riskLevel = successRate >= 90 ? 'Low' : successRate >= 70 ? 'Medium' : 'High'
        riskScore = successRate >= 90 ? 25 : successRate >= 70 ? 45 : 70
      }
      
      return {
        name: school.name.split(' ').slice(0, 2).join(' '),
        riskLevel,
        riskScore,
        distance: distance,
        balloted,
        successRate
      }
    })
  }

  const getPhaseTimeline = () => {
    return [
      { phase: 'Phase 1', period: 'Early June', description: 'Siblings of current students', eligible: userInputs.has_siblings },
      { phase: 'Phase 2A', period: 'Mid June', description: 'Alumni children & staff children', eligible: userInputs.is_alumni },
      { phase: 'Phase 2B', period: 'Late June', description: 'Volunteers & community leaders', eligible: userInputs.willing_to_volunteer },
      { phase: 'Phase 2C', period: 'Early July', description: 'Citizens within 1km & 2km', eligible: true },
      { phase: 'Phase 2C(S)', period: 'Mid July', description: 'All remaining citizens', eligible: true },
      { phase: 'Phase 3', period: 'Late July', description: 'Non-citizens', eligible: true }
    ]
  }

  const COLORS = ['#10b981', '#3b82f6', '#8b5cf6', '#f59e0b', '#ef4444', '#6b7280']

  return (
    <div className="space-y-8 animate-fade-in">
      {/* Enhanced Header */}
      <div className="bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 rounded-3xl p-8 text-white relative overflow-hidden">
        <div className="absolute inset-0 bg-black/10"></div>
        <div className="relative z-10">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-6">
              <button onClick={onBack} className="p-3 rounded-xl bg-white/10 hover:bg-white/20 transition-colors">
                <ArrowLeft className="h-6 w-6" />
              </button>
              <div className="flex items-center space-x-4">
                <div className="w-20 h-20 bg-white/20 rounded-3xl flex items-center justify-center backdrop-blur-sm">
                  <Brain className="h-10 w-10" />
                </div>
                <div>
                  <h1 className="text-4xl font-bold mb-2">AI-Powered P1 Strategy</h1>
                  <p className="text-xl text-white/90">Personalized admission recommendations using advanced AI</p>
                </div>
              </div>
            </div>
            
            {strategy && (
              <button onClick={downloadStrategy} className="bg-white/10 hover:bg-white/20 text-white px-6 py-3 rounded-xl font-semibold transition-colors flex items-center space-x-2 backdrop-blur-sm">
                <Download className="h-5 w-5" />
                <span>Download Strategy</span>
              </button>
            )}
          </div>
        </div>
        
        {/* Decorative elements */}
        <div className="absolute top-4 right-4 w-32 h-32 bg-white/5 rounded-full"></div>
        <div className="absolute bottom-4 left-1/3 w-24 h-24 bg-white/5 rounded-full"></div>
      </div>

      {/* Enhanced Selected Schools with Data Visualization */}
      <div className="bg-white rounded-3xl border border-gray-200 p-8 shadow-lg">
        <div className="flex items-center space-x-4 mb-8">
          <div className="w-14 h-14 bg-gradient-to-r from-blue-500 to-blue-600 rounded-2xl flex items-center justify-center">
            <CheckCircle className="h-7 w-7 text-white" />
          </div>
          <div>
            <h2 className="text-2xl font-bold text-gray-900">Selected Schools Analysis</h2>
            <p className="text-gray-600">{selectedSchools.length} schools selected for strategy development</p>
          </div>
        </div>
        
        {selectedSchools.length > 0 && (
          <div className="grid lg:grid-cols-2 gap-8 mb-8">
            {/* Competitiveness Chart */}
            <div className="bg-gradient-to-br from-blue-50 to-indigo-50 rounded-2xl p-6 border border-blue-100">
              <h3 className="text-lg font-bold text-gray-900 mb-4 flex items-center">
                <TrendingUp className="h-5 w-5 text-blue-600 mr-2" />
                Competitiveness Analysis
              </h3>
              <ResponsiveContainer width="100%" height={250}>
                <BarChart data={getCompetitivenessData()}>
                  <CartesianGrid strokeDasharray="3 3" stroke="#e2e8f0" />
                  <XAxis dataKey="name" tick={{ fontSize: 12 }} />
                  <YAxis tick={{ fontSize: 12 }} />
                  <Tooltip 
                    contentStyle={{ backgroundColor: 'white', border: '1px solid #e2e8f0', borderRadius: '12px' }}
                    labelStyle={{ color: '#1f2937', fontWeight: 'bold' }}
                  />
                  <Bar dataKey="successRate" fill="#3b82f6" radius={[4, 4, 0, 0]} />
                </BarChart>
              </ResponsiveContainer>
            </div>

            {/* Risk Assessment */}
            <div className="bg-gradient-to-br from-emerald-50 to-green-50 rounded-2xl p-6 border border-emerald-100">
              <h3 className="text-lg font-bold text-gray-900 mb-4 flex items-center">
                <Shield className="h-5 w-5 text-emerald-600 mr-2" />
                Risk Assessment
              </h3>
              <div className="space-y-3">
                {getRiskAssessmentData().map((item, index) => (
                  <div key={index} className="flex items-center justify-between p-3 bg-white rounded-xl border border-gray-100">
                    <div className="flex items-center space-x-3">
                      <div className={`w-3 h-3 rounded-full ${
                        item.riskLevel === 'Low' ? 'bg-emerald-500' :
                        item.riskLevel === 'Medium' ? 'bg-amber-500' : 'bg-red-500'
                      }`}></div>
                      <span className="font-medium text-gray-900">{item.name}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <span className={`text-sm font-semibold ${
                        item.riskLevel === 'Low' ? 'text-emerald-700' :
                        item.riskLevel === 'Medium' ? 'text-amber-700' : 'text-red-700'
                      }`}>
                        {item.riskLevel} Risk
                      </span>
                      <div className="w-16 h-2 bg-gray-200 rounded-full overflow-hidden">
                        <div 
                          className={`h-full ${
                            item.riskLevel === 'Low' ? 'bg-emerald-500' :
                            item.riskLevel === 'Medium' ? 'bg-amber-500' : 'bg-red-500'
                          }`}
                          style={{ width: `${item.riskScore}%` }}
                        ></div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}
        
        {/* Enhanced School Cards */}
        <div className="grid gap-4">
          {selectedSchools.map((school, index) => (
            <div key={index} className="bg-gradient-to-r from-white to-gray-50 rounded-2xl p-6 border border-gray-200 hover:border-blue-300 transition-all duration-300 hover:shadow-lg">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-4">
                  <div className="w-12 h-12 bg-gradient-to-r from-blue-600 to-blue-700 rounded-xl flex items-center justify-center">
                    <span className="text-white font-bold">#{index + 1}</span>
                  </div>
                  <div className="flex-1">
                    <h3 className="font-bold text-gray-900 text-lg">{school.name}</h3>
                    <div className="flex items-center space-x-4 text-sm text-gray-600 mt-1">
                      <div className="flex items-center space-x-1">
                        <MapPin className="h-4 w-4" />
                        <span>{school.distance}km away</span>
                      </div>
                      <div className="flex items-center space-x-1">
                        <Users className="h-4 w-4" />
                        <span>{school.p1_data?.total_vacancies} places</span>
                      </div>
                    </div>
                  </div>
                </div>
                
                <div className="flex items-center space-x-4">
                  <div className="text-right">
                    <div className={`text-sm font-bold ${school.p1_data?.balloted ? 'text-red-600' : 'text-emerald-600'}`}>
                      {school.p1_data?.balloted ? 'Balloted' : 'Non-balloted'}
                    </div>
                    <div className="text-xs text-gray-500">
                      {getSchoolSuccessRate(school)}% success rate
                    </div>
                  </div>
                  
                  <div className={`w-4 h-4 rounded-full ${school.p1_data?.balloted ? 'bg-red-500' : 'bg-emerald-500'}`}></div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Enhanced User Input Form */}
      {showInputForm && (
        <div className="bg-white rounded-3xl border border-gray-200 p-8 shadow-lg">
          <div className="text-center mb-10">
            <div className="w-20 h-20 bg-gradient-to-r from-emerald-500 to-blue-500 rounded-3xl flex items-center justify-center mx-auto mb-6">
              <Users className="h-10 w-10 text-white" />
            </div>
            <h2 className="text-3xl font-bold text-gray-900 mb-3">Tell Us About Your Situation</h2>
            <p className="text-xl text-gray-600">Help us create the most accurate strategy for your family</p>
          </div>
          
          <div className="space-y-12">
            {/* Family Situation */}
            <div className="space-y-8">
              <div className="flex items-center space-x-4">
                <div className="w-10 h-10 bg-emerald-100 rounded-2xl flex items-center justify-center">
                  <Users className="h-6 w-6 text-emerald-600" />
                </div>
                <h3 className="text-2xl font-bold text-gray-900">Family Situation</h3>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <label className={`group relative overflow-hidden rounded-2xl p-6 cursor-pointer transition-all duration-300 ${
                  userInputs.has_siblings 
                    ? 'border-2 border-emerald-500 bg-gradient-to-br from-emerald-50 to-emerald-100 shadow-lg transform scale-105' 
                    : 'border border-gray-200 bg-white hover:border-emerald-300 hover:shadow-md'
                }`}>
                  <input
                    type="checkbox"
                    checked={userInputs.has_siblings}
                    onChange={(e) => handleInputChange('has_siblings', e.target.checked)}
                    className="sr-only"
                  />
                  <div className="flex items-start space-x-4">
                    <div className={`w-14 h-14 rounded-2xl flex items-center justify-center transition-all duration-300 ${
                      userInputs.has_siblings ? 'bg-emerald-600 text-white shadow-lg' : 'bg-gray-100 text-gray-500 group-hover:bg-emerald-100 group-hover:text-emerald-600'
                    }`}>
                      <CheckCircle className="h-7 w-7" />
                    </div>
                    <div className="flex-1">
                      <div className="font-bold text-gray-900 mb-2 text-lg">Has siblings in target schools</div>
                      <div className="text-gray-600 leading-relaxed">Eligible for Phase 1 registration with guaranteed placement</div>
                      {userInputs.has_siblings && (
                        <div className="mt-3 px-3 py-1 bg-emerald-600 text-white text-sm rounded-full inline-block">
                          ✓ Guaranteed Admission
                        </div>
                      )}
                    </div>
                  </div>
                </label>

                <label className={`group relative overflow-hidden rounded-2xl p-6 cursor-pointer transition-all duration-300 ${
                  userInputs.is_alumni 
                    ? 'border-2 border-blue-500 bg-gradient-to-br from-blue-50 to-blue-100 shadow-lg transform scale-105' 
                    : 'border border-gray-200 bg-white hover:border-blue-300 hover:shadow-md'
                }`}>
                  <input
                    type="checkbox"
                    checked={userInputs.is_alumni}
                    onChange={(e) => handleInputChange('is_alumni', e.target.checked)}
                    className="sr-only"
                  />
                  <div className="flex items-start space-x-4">
                    <div className={`w-14 h-14 rounded-2xl flex items-center justify-center transition-all duration-300 ${
                      userInputs.is_alumni ? 'bg-blue-600 text-white shadow-lg' : 'bg-gray-100 text-gray-500 group-hover:bg-blue-100 group-hover:text-blue-600'
                    }`}>
                      <Award className="h-7 w-7" />
                    </div>
                    <div className="flex-1">
                      <div className="font-bold text-gray-900 mb-2 text-lg">Parent is alumni</div>
                      <div className="text-gray-600 leading-relaxed">Eligible for Phase 2A registration with higher priority</div>
                      {userInputs.is_alumni && (
                        <div className="mt-3 px-3 py-1 bg-blue-600 text-white text-sm rounded-full inline-block">
                          ✓ Phase 2A Priority
                        </div>
                      )}
                    </div>
                  </div>
                </label>

                <label className={`group relative overflow-hidden rounded-2xl p-6 cursor-pointer transition-all duration-300 ${
                  userInputs.willing_to_volunteer 
                    ? 'border-2 border-purple-500 bg-gradient-to-br from-purple-50 to-purple-100 shadow-lg transform scale-105' 
                    : 'border border-gray-200 bg-white hover:border-purple-300 hover:shadow-md'
                }`}>
                  <input
                    type="checkbox"
                    checked={userInputs.willing_to_volunteer}
                    onChange={(e) => handleInputChange('willing_to_volunteer', e.target.checked)}
                    className="sr-only"
                  />
                  <div className="flex items-start space-x-4">
                    <div className={`w-14 h-14 rounded-2xl flex items-center justify-center transition-all duration-300 ${
                      userInputs.willing_to_volunteer ? 'bg-purple-600 text-white shadow-lg' : 'bg-gray-100 text-gray-500 group-hover:bg-purple-100 group-hover:text-purple-600'
                    }`}>
                      <Users className="h-7 w-7" />
                    </div>
                    <div className="flex-1">
                      <div className="font-bold text-gray-900 mb-2 text-lg">Willing to volunteer</div>
                      <div className="text-gray-600 leading-relaxed">Can qualify for Phase 2B registration through community service</div>
                      {userInputs.willing_to_volunteer && (
                        <div className="mt-3 px-3 py-1 bg-purple-600 text-white text-sm rounded-full inline-block">
                          ✓ Phase 2B Eligible
                        </div>
                      )}
                    </div>
                  </div>
                </label>

                <label className={`group relative overflow-hidden rounded-2xl p-6 cursor-pointer transition-all duration-300 ${
                  userInputs.can_relocate 
                    ? 'border-2 border-amber-500 bg-gradient-to-br from-amber-50 to-amber-100 shadow-lg transform scale-105' 
                    : 'border border-gray-200 bg-white hover:border-amber-300 hover:shadow-md'
                }`}>
                  <input
                    type="checkbox"
                    checked={userInputs.can_relocate}
                    onChange={(e) => handleInputChange('can_relocate', e.target.checked)}
                    className="sr-only"
                  />
                  <div className="flex items-start space-x-4">
                    <div className={`w-14 h-14 rounded-2xl flex items-center justify-center transition-all duration-300 ${
                      userInputs.can_relocate ? 'bg-amber-600 text-white shadow-lg' : 'bg-gray-100 text-gray-500 group-hover:bg-amber-100 group-hover:text-amber-600'
                    }`}>
                      <Home className="h-7 w-7" />
                    </div>
                    <div className="flex-1">
                      <div className="font-bold text-gray-900 mb-2 text-lg">Can relocate if needed</div>
                      <div className="text-gray-600 leading-relaxed">Flexible with location for better admission chances</div>
                      {userInputs.can_relocate && (
                        <div className="mt-3 px-3 py-1 bg-amber-600 text-white text-sm rounded-full inline-block">
                          ✓ Location Flexible
                        </div>
                      )}
                    </div>
                  </div>
                </label>
              </div>
            </div>

            {/* Priorities */}
            <div className="space-y-8">
              <div className="flex items-center space-x-4">
                <div className="w-10 h-10 bg-purple-100 rounded-2xl flex items-center justify-center">
                  <Target className="h-6 w-6 text-purple-600" />
                </div>
                <h3 className="text-2xl font-bold text-gray-900">Your Priorities</h3>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {priorityOptions.map((priority) => {
                  const isSelected = userInputs.priorities.includes(priority.label)
                  return (
                    <label
                      key={priority.id}
                      className={`group rounded-2xl p-5 cursor-pointer transition-all duration-300 ${
                        isSelected
                          ? `border-2 ${priority.color.split(' ')[2]} ${priority.color.split(' ')[1]} shadow-lg transform scale-105`
                          : 'border border-gray-200 bg-white hover:border-gray-300 hover:shadow-md'
                      }`}
                    >
                      <input
                        type="checkbox"
                        checked={isSelected}
                        onChange={() => handlePriorityToggle(priority.id)}
                        className="sr-only"
                      />
                      <div className="flex items-center space-x-3">
                        <div className={`w-12 h-12 rounded-xl flex items-center justify-center transition-all duration-300 ${
                          isSelected ? priority.color.replace('border-', 'bg-').replace('bg-', 'bg-') + ' text-white shadow-lg' : 'bg-gray-100 text-gray-500 group-hover:bg-gray-200'
                        }`}>
                          <priority.icon className="h-6 w-6" />
                        </div>
                        <span className="font-semibold text-gray-900">{priority.label}</span>
                      </div>
                    </label>
                  )
                })}
              </div>
            </div>

            {/* Application Year */}
            <div className="space-y-8">
              <div className="flex items-center space-x-4">
                <div className="w-10 h-10 bg-blue-100 rounded-2xl flex items-center justify-center">
                  <Calendar className="h-6 w-6 text-blue-600" />
                </div>
                <h3 className="text-2xl font-bold text-gray-900">Application Timeline</h3>
              </div>
              
              <div className="max-w-xs">
                <select
                  value={userInputs.application_year}
                  onChange={(e) => handleInputChange('application_year', e.target.value)}
                  className="w-full px-4 py-3 text-lg border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white shadow-sm"
                >
                  <option value="2025">2025 (Next Year)</option>
                  <option value="2026">2026</option>
                  <option value="2027">2027</option>
                </select>
              </div>
            </div>

            {/* Generate Button */}
            <div className="pt-8 border-t border-gray-200">
              <button
                onClick={generateStrategy}
                disabled={loading || selectedSchools.length === 0}
                className="w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white py-5 rounded-2xl text-xl font-bold shadow-xl transform transition-all duration-200 hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
              >
                <div className="flex items-center justify-center space-x-3">
                  <Brain className="h-7 w-7" />
                  <span>Generate AI Strategy</span>
                  <Sparkles className="h-6 w-6" />
                </div>
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Enhanced Loading State */}
      {loading && (
        <div className="bg-white rounded-3xl border border-gray-200 p-16 text-center shadow-lg">
          <div className="w-24 h-24 bg-gradient-to-r from-purple-600 to-pink-600 rounded-3xl flex items-center justify-center mx-auto mb-8">
            <Loader2 className="h-12 w-12 animate-spin text-white" />
          </div>
          <h3 className="text-3xl font-bold text-gray-900 mb-4">Generating Your Strategy...</h3>
          <p className="text-xl text-gray-600 mb-12 max-w-2xl mx-auto">
            Our AI is analyzing your situation and school data to create personalized recommendations.
          </p>
          <div className="flex items-center justify-center space-x-8 text-gray-500">
            <div className="flex items-center space-x-3">
              <div className="w-3 h-3 bg-purple-500 rounded-full animate-pulse"></div>
              <span className="font-medium">Analyzing data</span>
            </div>
            <div className="flex items-center space-x-3">
              <div className="w-3 h-3 bg-blue-500 rounded-full animate-pulse" style={{ animationDelay: '0.5s' }}></div>
              <span className="font-medium">Processing preferences</span>
            </div>
            <div className="flex items-center space-x-3">
              <div className="w-3 h-3 bg-emerald-500 rounded-full animate-pulse" style={{ animationDelay: '1s' }}></div>
              <span className="font-medium">Creating strategy</span>
            </div>
          </div>
        </div>
      )}

      {/* Enhanced Error State */}
      {error && (
        <div className="bg-red-50 rounded-3xl border-2 border-red-200 p-8">
          <div className="flex items-start space-x-6">
            <div className="w-16 h-16 bg-red-100 rounded-3xl flex items-center justify-center">
              <AlertCircle className="h-8 w-8 text-red-600" />
            </div>
            <div className="flex-1">
              <h3 className="text-xl font-bold text-red-900 mb-3">Strategy Generation Failed</h3>
              <p className="text-red-700 mb-6 text-lg">{error}</p>
              <div className="flex items-center space-x-4">
                <button
                  onClick={() => {
                    setError('')
                    setShowInputForm(true)
                  }}
                  className="bg-red-600 hover:bg-red-700 text-white px-6 py-3 rounded-xl font-semibold transition-colors"
                >
                  Try Again
                </button>
                <button onClick={onBack} className="bg-gray-100 hover:bg-gray-200 text-gray-700 px-6 py-3 rounded-xl font-semibold transition-colors">
                  Back to Results
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Enhanced Strategy Results with Tabs */}
      {strategy && !loading && (
        <div className="bg-white rounded-3xl border border-gray-200 shadow-lg overflow-hidden">
          {/* Strategy Header */}
          <div className="bg-gradient-to-r from-emerald-500 to-blue-500 p-8 text-white">
            <div className="flex items-start space-x-6">
              <div className="w-20 h-20 bg-white/20 rounded-3xl flex items-center justify-center backdrop-blur-sm">
                <FileText className="h-10 w-10" />
              </div>
              <div className="flex-1">
                <h2 className="text-3xl font-bold mb-3">Your Personalized P1 Strategy</h2>
                <p className="text-xl text-white/90 mb-4">Generated by AI • {new Date().toLocaleDateString()}</p>
                <div className="flex items-center space-x-6 text-white/80">
                  <div className="flex items-center space-x-2">
                    <CheckCircle className="h-5 w-5" />
                    <span>{selectedSchools.length} schools analyzed</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Target className="h-5 w-5" />
                    <span>{userInputs.priorities.length} priorities considered</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Calendar className="h-5 w-5" />
                    <span>{userInputs.application_year} application year</span>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Tab Navigation */}
          <div className="border-b border-gray-200 bg-gray-50">
            <div className="flex space-x-1 p-2">
              {[
                { id: 'overview', label: 'Overview', icon: FileText },
                { id: 'timeline', label: 'Phase Timeline', icon: Calendar },
                { id: 'recommendations', label: 'Recommendations', icon: Target }
              ].map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`flex items-center space-x-2 px-6 py-3 rounded-xl font-semibold transition-all duration-200 ${
                    activeTab === tab.id
                      ? 'bg-white text-blue-600 shadow-sm border border-gray-200'
                      : 'text-gray-600 hover:text-gray-900 hover:bg-white/50'
                  }`}
                >
                  <tab.icon className="h-5 w-5" />
                  <span>{tab.label}</span>
                </button>
              ))}
            </div>
          </div>

          {/* Tab Content */}
          <div className="p-8">
            {activeTab === 'overview' && (
              <div className="prose prose-lg max-w-none">
                <div className="bg-gradient-to-br from-gray-50 to-white rounded-2xl p-8 border border-gray-200">
                  <div className="text-gray-900 leading-relaxed">
                    <ReactMarkdown 
                      remarkPlugins={[remarkGfm]}
                      components={{
                        h1: ({node, ...props}) => <h1 className="text-3xl font-bold text-gray-900 mb-6 mt-8 first:mt-0 border-b border-gray-200 pb-4" {...props} />,
                        h2: ({node, ...props}) => <h2 className="text-2xl font-bold text-gray-900 mb-4 mt-6 first:mt-0" {...props} />,
                        h3: ({node, ...props}) => <h3 className="text-xl font-semibold text-gray-900 mb-3 mt-5 first:mt-0" {...props} />,
                        h4: ({node, ...props}) => <h4 className="text-lg font-semibold text-gray-900 mb-2 mt-4 first:mt-0" {...props} />,
                        p: ({node, ...props}) => <p className="mb-4 text-gray-700 leading-relaxed text-lg" {...props} />,
                        ul: ({node, ...props}) => <ul className="mb-6 pl-6 space-y-2" {...props} />,
                        ol: ({node, ...props}) => <ol className="mb-6 pl-6 space-y-2" {...props} />,
                        li: ({node, ...props}) => <li className="text-gray-700 text-lg" {...props} />,
                        strong: ({node, ...props}) => <strong className="font-bold text-gray-900" {...props} />,
                        em: ({node, ...props}) => <em className="italic text-gray-800" {...props} />,
                        blockquote: ({node, ...props}) => <blockquote className="border-l-4 border-blue-300 pl-6 italic text-gray-600 my-6 bg-blue-50 py-4 rounded-r-lg" {...props} />,
                        hr: ({node, ...props}) => <hr className="my-8 border-gray-300" {...props} />,
                        code: ({node, inline, ...props}) => 
                          inline 
                            ? <code className="bg-gray-200 text-gray-800 px-2 py-1 rounded text-sm font-mono" {...props} />
                            : <code className="block bg-gray-100 text-gray-800 p-6 rounded-xl text-sm overflow-x-auto font-mono border border-gray-200" {...props} />,
                        table: ({node, ...props}) => <table className="w-full my-8 border-collapse bg-white rounded-xl overflow-hidden shadow-sm" {...props} />,
                        thead: ({node, ...props}) => <thead className="bg-gradient-to-r from-gray-100 to-gray-50" {...props} />,
                        tbody: ({node, ...props}) => <tbody {...props} />,
                        tr: ({node, ...props}) => <tr className="border-b border-gray-200 hover:bg-gray-50 transition-colors" {...props} />,
                        th: ({node, ...props}) => <th className="px-6 py-4 text-left font-bold text-gray-900 border-r border-gray-200 last:border-r-0" {...props} />,
                        td: ({node, ...props}) => <td className="px-6 py-4 text-gray-700 border-r border-gray-200 last:border-r-0 align-top" {...props} />
                      }}
                    >
                      {strategy}
                    </ReactMarkdown>
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'timeline' && (
              <div className="space-y-6">
                <h3 className="text-2xl font-bold text-gray-900 mb-6">P1 Registration Phase Timeline</h3>
                <div className="space-y-4">
                  {getPhaseTimeline().map((phase, index) => (
                    <div key={index} className={`flex items-center p-6 rounded-2xl border-2 transition-all duration-300 ${
                      phase.eligible 
                        ? 'border-emerald-300 bg-gradient-to-r from-emerald-50 to-emerald-100 shadow-md' 
                        : 'border-gray-200 bg-gray-50'
                    }`}>
                      <div className="flex items-center space-x-6 flex-1">
                        <div className={`w-16 h-16 rounded-2xl flex items-center justify-center font-bold text-white ${
                          phase.eligible ? 'bg-gradient-to-r from-emerald-500 to-emerald-600' : 'bg-gray-400'
                        }`}>
                          {index + 1}
                        </div>
                        <div className="flex-1">
                          <h4 className="text-xl font-bold text-gray-900 mb-1">{phase.phase}</h4>
                          <p className="text-gray-600 mb-2">{phase.description}</p>
                          <div className="text-sm text-gray-500">{phase.period}</div>
                        </div>
                        {phase.eligible && (
                          <div className="flex items-center space-x-2 bg-emerald-600 text-white px-4 py-2 rounded-xl">
                            <CheckCircle className="h-5 w-5" />
                            <span className="font-semibold">Eligible</span>
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {activeTab === 'recommendations' && (
              <div className="space-y-8">
                <h3 className="text-2xl font-bold text-gray-900 mb-6">Strategic Recommendations</h3>
                
                {/* Quick Actions */}
                <div className="grid md:grid-cols-2 gap-6">
                  <div className="bg-gradient-to-br from-blue-50 to-indigo-50 rounded-2xl p-6 border border-blue-200">
                    <h4 className="text-lg font-bold text-gray-900 mb-4 flex items-center">
                      <Zap className="h-5 w-5 text-blue-600 mr-2" />
                      Immediate Actions
                    </h4>
                    <ul className="space-y-3">
                      <li className="flex items-start space-x-3">
                        <div className="w-2 h-2 bg-blue-500 rounded-full mt-2"></div>
                        <span className="text-gray-700">Register for priority phases you're eligible for</span>
                      </li>
                      <li className="flex items-start space-x-3">
                        <div className="w-2 h-2 bg-blue-500 rounded-full mt-2"></div>
                        <span className="text-gray-700">Consider relocation if within 1-2km of preferred schools</span>
                      </li>
                      <li className="flex items-start space-x-3">
                        <div className="w-2 h-2 bg-blue-500 rounded-full mt-2"></div>
                        <span className="text-gray-700">Prepare backup options for balloted schools</span>
                      </li>
                    </ul>
                  </div>
                  
                  <div className="bg-gradient-to-br from-emerald-50 to-green-50 rounded-2xl p-6 border border-emerald-200">
                    <h4 className="text-lg font-bold text-gray-900 mb-4 flex items-center">
                      <Target className="h-5 w-5 text-emerald-600 mr-2" />
                      Long-term Strategy
                    </h4>
                    <ul className="space-y-3">
                      <li className="flex items-start space-x-3">
                        <div className="w-2 h-2 bg-emerald-500 rounded-full mt-2"></div>
                        <span className="text-gray-700">Build relationships with school communities</span>
                      </li>
                      <li className="flex items-start space-x-3">
                        <div className="w-2 h-2 bg-emerald-500 rounded-full mt-2"></div>
                        <span className="text-gray-700">Monitor registration patterns for next year</span>
                      </li>
                      <li className="flex items-start space-x-3">
                        <div className="w-2 h-2 bg-emerald-500 rounded-full mt-2"></div>
                        <span className="text-gray-700">Stay informed about policy changes</span>
                      </li>
                    </ul>
                  </div>
                </div>

                {/* Success Probability */}
                <div className="bg-gradient-to-br from-purple-50 to-pink-50 rounded-2xl p-8 border border-purple-200">
                  <h4 className="text-xl font-bold text-gray-900 mb-6 flex items-center">
                    <TrendingUp className="h-6 w-6 text-purple-600 mr-3" />
                    Success Probability by School
                  </h4>
                  <div className="grid gap-4">
                    {selectedSchools.map((school, index) => {
                      const successRate = getSchoolSuccessRate(school)
                      const riskData = getRiskAssessmentData().find(r => r.name === school.name.split(' ').slice(0, 2).join(' '))
                      
                      return (
                        <div key={index} className="flex items-center justify-between p-4 bg-white rounded-xl border border-gray-200">
                          <div className="flex items-center space-x-4">
                            <div className="w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-500 rounded-xl flex items-center justify-center text-white font-bold">
                              #{index + 1}
                            </div>
                            <div>
                              <h5 className="font-bold text-gray-900">{school.name}</h5>
                              <p className="text-sm text-gray-600">{school.distance}km • {school.p1_data?.balloted ? 'Balloted' : 'Non-balloted'}</p>
                            </div>
                          </div>
                          <div className="flex items-center space-x-4">
                            <div className="text-right">
                              <div className="text-2xl font-bold text-gray-900">{successRate}%</div>
                              <div className="text-sm text-gray-500">Success Rate</div>
                            </div>
                            <div className={`w-4 h-4 rounded-full ${
                              riskData?.riskLevel === 'Low' ? 'bg-emerald-500' :
                              riskData?.riskLevel === 'Medium' ? 'bg-amber-500' : 'bg-red-500'
                            }`}></div>
                          </div>
                        </div>
                      )
                    })}
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Enhanced Footer */}
          <div className="bg-gray-50 px-8 py-6 border-t border-gray-200">
            <div className="flex flex-col lg:flex-row items-center justify-between space-y-4 lg:space-y-0">
              <div className="text-gray-600 text-center lg:text-left">
                <p>Strategy based on {selectedSchools.length} selected schools and your preferences</p>
                <p className="text-sm text-gray-500 mt-1">Generated using advanced AI analysis of P1 registration data</p>
              </div>
              <div className="flex items-center space-x-4">
                <button
                  onClick={() => {
                    setStrategy('')
                    setShowInputForm(true)
                    setActiveTab('overview')
                  }}
                  className="bg-gray-100 hover:bg-gray-200 text-gray-700 px-6 py-3 rounded-xl font-semibold transition-colors"
                >
                  Generate New Strategy
                </button>
                <button onClick={downloadStrategy} className="bg-gradient-to-r from-emerald-500 to-blue-500 hover:from-emerald-600 hover:to-blue-600 text-white px-6 py-3 rounded-xl font-semibold transition-colors flex items-center space-x-2 shadow-lg">
                  <Download className="h-5 w-5" />
                  <span>Download Strategy</span>
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default StrategyView 